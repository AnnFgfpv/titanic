from fastapi import FastAPI, HTTPException
import httpx
import os
from typing import Dict, List
from collections import Counter

tags_metadata = [
    {
        "name": "Health",
        "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"
    },
    {
        "name": "Statistics",
        "description": "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º –¢–∏—Ç–∞–Ω–∏–∫–∞"
    },
]

app = FastAPI(
    title="Titanic Statistics Service",
    description="""
    ## üìä –°–µ—Ä–≤–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º –¢–∏—Ç–∞–Ω–∏–∫–∞
    
    –≠—Ç–æ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞—Ö –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ª–∞–π–Ω–µ—Ä–∞.
    
    ### –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º
    - üé´ –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª–∞—Å—Å–∞–º –±–∏–ª–µ—Ç–æ–≤
    - ‚öì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Ä—Ç–∞–º –ø–æ—Å–∞–¥–∫–∏
    - üó∫Ô∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
    - üë• –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    
    **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç Passenger Service —á–µ—Ä–µ–∑ HTTP.
    """,
    version="2.0.0",
    openapi_tags=tags_metadata,
    contact={
        "name": "Titanic Microservices Team",
        "email": "support@titanic-api.example.com"
    },
    license_info={
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT"
    }
)

# URL Passenger Service
PASSENGER_SERVICE_URL = os.getenv("PASSENGER_SERVICE_URL", "http://passenger-service:8001")


async def fetch_all_passengers() -> List[Dict]:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"""
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(
                f"{PASSENGER_SERVICE_URL}/passengers",
                params={"limit": 1000, "offset": 0}
            )
            response.raise_for_status()
            return response.json()
    except httpx.HTTPStatusError as e:
        raise HTTPException(
            status_code=502,
            detail=f"Error communicating with Passenger Service: {e.response.status_code}"
        )
    except httpx.RequestError as e:
        raise HTTPException(
            status_code=503,
            detail=f"Cannot connect to Passenger Service: {str(e)}"
        )


@app.get("/", tags=["Health"])
async def root():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "service": "Titanic Statistics Service",
        "status": "running",
        "version": "2.0.0"
    }


@app.get(
    "/stats", 
    tags=["Statistics"],
    summary="–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    description="""
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º –¢–∏—Ç–∞–Ω–∏–∫–∞.
    
    –í–∫–ª—é—á–∞–µ—Ç:
    - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
    - –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç
    - –°—Ä–µ–¥–Ω—é—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞
    - –°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π –±–∏–ª–µ—Ç
    - –°–∞–º–æ–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    """,
    responses={
        200: {
            "description": "–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π",
            "content": {
                "application/json": {
                    "example": {
                        "total_passengers": 102,
                        "average_age": 29.85,
                        "average_fare": 35.62,
                        "most_expensive_ticket": 512.33,
                        "most_popular_destination": "New York"
                    }
                }
            }
        },
        502: {"description": "–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Passenger Service"},
        503: {"description": "Passenger Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
    }
)
async def get_statistics():
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º"""
    passengers = await fetch_all_passengers()
    
    if not passengers:
        return {
            "total_passengers": 0,
            "average_age": None,
            "average_fare": 0.0,
            "most_expensive_ticket": 0.0,
            "most_popular_destination": None
        }
    
    # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_passengers = len(passengers)
    
    # –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤–æ–∑—Ä–∞—Å—Ç–æ–º)
    ages = [p['age'] for p in passengers if p.get('age') is not None]
    average_age = round(sum(ages) / len(ages), 2) if ages else None
    
    # –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞
    fares = [p['fare'] for p in passengers if p.get('fare')]
    average_fare = round(sum(fares) / len(fares), 2) if fares else 0.0
    
    # –°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π –±–∏–ª–µ—Ç
    most_expensive_ticket = round(max(fares), 2) if fares else 0.0
    
    # –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    destinations = [p['destination'] for p in passengers if p.get('destination')]
    destination_counter = Counter(destinations)
    most_popular_destination = destination_counter.most_common(1)[0][0] if destination_counter else None
    
    return {
        "total_passengers": total_passengers,
        "average_age": average_age,
        "average_fare": average_fare,
        "most_expensive_ticket": most_expensive_ticket,
        "most_popular_destination": most_popular_destination
    }


@app.get(
    "/stats/by-class",
    tags=["Statistics"],
    summary="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º",
    description="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –∏ —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º –±–∏–ª–µ—Ç–æ–≤.",
    responses={
        200: {
            "description": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª–∞—Å—Å—É",
            "content": {
                "application/json": {
                    "example": {
                        "class_1": {"total": 22, "average_fare": 84.15, "average_age": 38.2},
                        "class_2": {"total": 18, "average_fare": 20.66, "average_age": 29.9},
                        "class_3": {"total": 62, "average_fare": 13.68, "average_age": 25.1}
                    }
                }
            }
        }
    }
)
async def get_stats_by_class():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º –±–∏–ª–µ—Ç–æ–≤"""
    passengers = await fetch_all_passengers()
    
    stats = {}
    for pclass in [1, 2, 3]:
        class_passengers = [p for p in passengers if p.get('pclass') == pclass]
        
        if class_passengers:
            ages = [p['age'] for p in class_passengers if p.get('age') is not None]
            fares = [p['fare'] for p in class_passengers if p.get('fare')]
            
            stats[f"class_{pclass}"] = {
                "total": len(class_passengers),
                "average_fare": round(sum(fares) / len(fares), 2) if fares else 0.0,
                "average_age": round(sum(ages) / len(ages), 2) if ages else None
            }
        else:
            stats[f"class_{pclass}"] = {
                "total": 0,
                "average_fare": 0.0,
                "average_age": None
            }
    
    return stats


@app.get(
    "/stats/by-port",
    tags=["Statistics"],
    summary="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Ä—Ç–∞–º –ø–æ—Å–∞–¥–∫–∏",
    description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –∏ —Å—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä—Ç–∞ –ø–æ—Å–∞–¥–∫–∏.",
    responses={
        200: {
            "description": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Ä—Ç–∞–º",
            "content": {
                "application/json": {
                    "example": {
                        "Southampton": {"total": 70, "average_fare": 28.50},
                        "Cherbourg": {"total": 18, "average_fare": 52.30},
                        "Queenstown": {"total": 14, "average_fare": 11.20}
                    }
                }
            }
        }
    }
)
async def get_stats_by_port():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Ä—Ç–∞–º –ø–æ—Å–∞–¥–∫–∏"""
    passengers = await fetch_all_passengers()
    
    ports = ['Southampton', 'Cherbourg', 'Queenstown']
    stats = {}
    
    for port in ports:
        port_passengers = [p for p in passengers if p.get('embarked') == port]
        
        if port_passengers:
            fares = [p['fare'] for p in port_passengers if p.get('fare')]
            stats[port] = {
                "total": len(port_passengers),
                "average_fare": round(sum(fares) / len(fares), 2) if fares else 0.0
            }
        else:
            stats[port] = {
                "total": 0,
                "average_fare": 0.0
            }
    
    return stats


@app.get(
    "/stats/destinations",
    tags=["Statistics"],
    summary="–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
    description="""
    –¢–æ–ø –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –∫—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –ø–∞—Å—Å–∞–∂–∏—Ä—ã.
    
    **üé¨ –ü–∞—Å—Ö–∞–ª–∫–∞:** –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –î–∂–µ–∫–∞!
    """,
    responses={
        200: {
            "description": "–°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
            "content": {
                "application/json": {
                    "example": {
                        "destinations": [
                            {"name": "New York", "count": 45},
                            {"name": "Immigration", "count": 20},
                            {"name": "Business trip", "count": 15},
                            {"name": "Pursue dreams in America", "count": 1}
                        ]
                    }
                }
            }
        }
    }
)
async def get_destinations():
    """–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π"""
    passengers = await fetch_all_passengers()
    
    destinations = [p['destination'] for p in passengers if p.get('destination')]
    destination_counter = Counter(destinations)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    sorted_destinations = [
        {"name": dest, "count": count}
        for dest, count in destination_counter.most_common()
    ]
    
    return {"destinations": sorted_destinations}


@app.get(
    "/stats/age-distribution",
    tags=["Statistics"],
    summary="–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
    description="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º.",
    responses={
        200: {
            "description": "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º",
            "content": {
                "application/json": {
                    "example": {
                        "children_0_12": {"count": 15, "percentage": 15.0},
                        "teens_13_19": {"count": 12, "percentage": 12.0},
                        "adults_20_40": {"count": 48, "percentage": 48.0},
                        "middle_age_41_60": {"count": 20, "percentage": 20.0},
                        "seniors_61_plus": {"count": 5, "percentage": 5.0}
                    }
                }
            }
        }
    }
)
async def get_age_distribution():
    """–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"""
    passengers = await fetch_all_passengers()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –≤–æ–∑—Ä–∞—Å—Ç–æ–º
    passengers_with_age = [p for p in passengers if p.get('age') is not None]
    total_with_age = len(passengers_with_age)
    
    if total_with_age == 0:
        return {
            "children_0_12": {"count": 0, "percentage": 0.0},
            "teens_13_19": {"count": 0, "percentage": 0.0},
            "adults_20_40": {"count": 0, "percentage": 0.0},
            "middle_age_41_60": {"count": 0, "percentage": 0.0},
            "seniors_61_plus": {"count": 0, "percentage": 0.0}
        }
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º
    children = len([p for p in passengers_with_age if 0 <= p['age'] <= 12])
    teens = len([p for p in passengers_with_age if 13 <= p['age'] <= 19])
    adults = len([p for p in passengers_with_age if 20 <= p['age'] <= 40])
    middle_age = len([p for p in passengers_with_age if 41 <= p['age'] <= 60])
    seniors = len([p for p in passengers_with_age if p['age'] >= 61])
    
    return {
        "children_0_12": {
            "count": children,
            "percentage": round((children / total_with_age) * 100, 1)
        },
        "teens_13_19": {
            "count": teens,
            "percentage": round((teens / total_with_age) * 100, 1)
        },
        "adults_20_40": {
            "count": adults,
            "percentage": round((adults / total_with_age) * 100, 1)
        },
        "middle_age_41_60": {
            "count": middle_age,
            "percentage": round((middle_age / total_with_age) * 100, 1)
        },
        "seniors_61_plus": {
            "count": seniors,
            "percentage": round((seniors / total_with_age) * 100, 1)
        }
    }
