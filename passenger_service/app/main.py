from fastapi import FastAPI, HTTPException, Query, Depends
from fastapi.security import HTTPBearer
from typing import List, Optional, Dict
from .models import Passenger, PassengerCreate, PassengerUpdate
from .storage import storage
from .dependencies import get_current_user, require_admin

security = HTTPBearer()

tags_metadata = [
    {
        "name": "Health",
        "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"
    },
    {
        "name": "Passengers",
        "description": "CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º–∏ –¢–∏—Ç–∞–Ω–∏–∫–∞. **–û–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–±—É—é—Ç JWT —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization.**"
    },
]

app = FastAPI(
    title="Titanic Passenger Service",
    description="""
    ## üö¢ –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º–∏ –¢–∏—Ç–∞–Ω–∏–∫–∞
    
    –≠—Ç–æ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ª–∞–π–Ω–µ—Ä–∞ RMS Titanic.
    
    ### –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - üìã –ü–æ–ª–Ω—ã–π CRUD –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
    - üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
    - üéØ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª–∞—Å—Å—É, –ø–æ–ª—É, –ø–æ—Ä—Ç—É –ø–æ—Å–∞–¥–∫–∏
    - üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - üîê JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    - üé¨ –ü–∞—Å—Ö–∞–ª–∫–∏ –∏–∑ —Ñ–∏–ª—å–º–∞ "–¢–∏—Ç–∞–Ω–∏–∫"
    - üë§ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –∑–∞–ø–∏—Å–∏ (created_by)
    
    ### –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:
    –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è JWT —Ç–æ–∫–µ–Ω.
    
    **–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:**
    1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: `POST /api/auth/register`
    2. –ò–ª–∏ –≤–æ–π–¥–∏—Ç–µ: `POST /api/auth/login`
    3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π access_token –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: `Authorization: Bearer <token>`
    
    **üëë –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å = Admin:**
    
    –ü–µ—Ä–≤—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å **admin** (–º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å).  
    –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ - —Ä–æ–ª—å **user** (–º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å).
    """,
    version="3.0.0",
    openapi_tags=tags_metadata,
    contact={
        "name": "Titanic Microservices Team",
        "email": "support@titanic-api.example.com"
    },
    license_info={
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT"
    }
)


@app.on_event("startup")
async def startup_event():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–∏—Å–∞"""
    storage.load_from_csv("/app/data/titanic.csv")
    print(f"‚úÖ Loaded {storage.count()} passengers from CSV")


@app.get(
    "/", 
    tags=["Health"],
    summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
    response_description="–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"
)
async def root():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "service": "Titanic Passenger Service",
        "status": "running",
        "version": "3.0.0",
        "passengers_count": storage.count(),
        "auth": "JWT Bearer Token"
    }


@app.get(
    "/passengers", 
    response_model=List[Passenger], 
    tags=["Passengers"],
    summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
    description="""
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    
    **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
    - –í—Å–µ –ø–∞—Å—Å–∞–∂–∏—Ä—ã: `/passengers`
    - –ü–∞—Å—Å–∞–∂–∏—Ä—ã 1-–≥–æ –∫–ª–∞—Å—Å–∞: `/passengers?pclass=1`
    - –ñ–µ–Ω—â–∏–Ω—ã –∏–∑ –°–∞—É—Ç–≥–µ–º–ø—Ç–æ–Ω–∞: `/passengers?sex=female&embarked=Southampton`
    - –ü–µ—Ä–≤—ã–µ 20 –∑–∞–ø–∏—Å–µ–π: `/passengers?limit=20`
    
    **üîì –ù–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏**
    """,
    responses={
        200: {
            "description": "–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
            "content": {
                "application/json": {
                    "example": [
                        {
                            "id": 1,
                            "name": "Braund, Mr. Owen Harris",
                            "pclass": 3,
                            "sex": "male",
                            "age": 22,
                            "fare": 7.25,
                            "embarked": "Southampton",
                            "destination": "New York",
                            "cabin": None,
                            "ticket": "A/5 21171",
                            "created_by": "system"
                        },
                        {
                            "id": 2,
                            "name": "Cumings, Mrs. John Bradley (Florence Briggs Thayer)",
                            "pclass": 1,
                            "sex": "female",
                            "age": 38,
                            "fare": 71.28,
                            "embarked": "Cherbourg",
                            "destination": "New York",
                            "cabin": "C85",
                            "ticket": "PC 17599",
                            "created_by": "system"
                        }
                    ]
                }
            }
        },
        400: {
            "description": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "sex must be 'male' or 'female'"
                    }
                }
            }
        }
    }
)
async def get_passengers(
    pclass: Optional[int] = Query(None, ge=1, le=3, description="–ö–ª–∞—Å—Å –±–∏–ª–µ—Ç–∞ (1, 2 –∏–ª–∏ 3)", example=1),
    sex: Optional[str] = Query(None, description="–ü–æ–ª (male –∏–ª–∏ female)", example="female"),
    embarked: Optional[str] = Query(None, description="–ü–æ—Ä—Ç –ø–æ—Å–∞–¥–∫–∏", example="Southampton"),
    limit: int = Query(100, ge=1, le=1000, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π", example=10),
    offset: int = Query(0, ge=0, description="–°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏", example=0)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    if sex and sex not in ['male', 'female']:
        raise HTTPException(status_code=400, detail="sex must be 'male' or 'female'")
    
    if embarked and embarked not in ['Southampton', 'Cherbourg', 'Queenstown']:
        raise HTTPException(
            status_code=400, 
            detail="embarked must be one of: Southampton, Cherbourg, Queenstown"
        )
    
    passengers = storage.get_all(
        pclass=pclass,
        sex=sex,
        embarked=embarked,
        limit=limit,
        offset=offset
    )
    return passengers


@app.get(
    "/passengers/search",
    response_model=List[Passenger],
    tags=["Passengers"],
    summary="–ü–æ–∏—Å–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏",
    description="""
    –ü–æ–∏—Å–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π).
    
    **üé¨ –ü–∞—Å—Ö–∞–ª–∫–∞:** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ `Jack` –∏–ª–∏ `Rose`!
    
    **üîì –ù–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏**
    """,
    responses={
        200: {
            "description": "–°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
            "content": {
                "application/json": {
                    "example": [
                        {
                            "id": 1,
                            "name": "Dawson, Mr. Jack",
                            "pclass": 3,
                            "sex": "male",
                            "age": 20,
                            "fare": 8.05,
                            "embarked": "Southampton",
                            "destination": "Pursue dreams in America",
                            "cabin": None,
                            "ticket": "A/5 21171",
                            "created_by": "admin"
                        },
                        {
                            "id": 2,
                            "name": "DeWitt Bukater, Miss. Rose",
                            "pclass": 1,
                            "sex": "female",
                            "age": 17,
                            "fare": 211.34,
                            "embarked": "Southampton",
                            "destination": "New York",
                            "cabin": "B52",
                            "ticket": "PC 17599",
                            "created_by": "admin"
                        }
                    ]
                }
            }
        }
    }
)
async def search_passengers(
    name: str = Query(..., min_length=1, description="–ß–∞—Å—Ç—å –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞", example="Jack"),
    limit: int = Query(100, ge=1, le=1000, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
):
    """–ü–æ–∏—Å–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏ (case-insensitive)"""
    passengers = storage.search_by_name(name, limit)
    return passengers


@app.post(
    "/passengers", 
    response_model=Passenger, 
    status_code=201, 
    tags=["Passengers"],
    summary="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ üîê",
    description="""
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞. **–¢—Ä–µ–±—É–µ—Ç—Å—è JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.**
    
    –ü–æ–ª–µ `created_by` –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ username —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    **üé≠ –ü–∞—Å—Ö–∞–ª–∫–∞:** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å–µ–ª–∏—Ç—å –î–∂–µ–∫–∞ –∏ –†–æ–∑—É –≤ –æ–¥–Ω—É –∫–∞—é—Ç—É! 
    """,
    responses={
        201: {
            "description": "–ü–∞—Å—Å–∞–∂–∏—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
            "content": {
                "application/json": {
                    "example": {
                        "id": 102,
                        "name": "Dawson, Mr. Jack",
                        "pclass": 3,
                        "sex": "male",
                        "age": 20,
                        "fare": 8.05,
                        "embarked": "Southampton",
                        "destination": "Pursue dreams in America",
                        "cabin": None,
                        "ticket": "A/5 21171",
                        "created_by": "admin"
                    }
                }
            }
        },
        400: {
            "description": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–∞—Å—Ö–∞–ª–∫–∞ —Å –î–∂–µ–∫–æ–º –∏ –†–æ–∑–æ–π! üé¨",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Jack and Rose cannot share the same cabin! üíî"
                    }
                }
            }
        },
        401: {
            "description": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JWT —Ç–æ–∫–µ–Ω",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Not authenticated"
                    }
                }
            }
        }
    }
)
async def create_passenger(
    passenger: PassengerCreate,
    current_user: Dict = Depends(get_current_user)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è JWT —Ç–æ–∫–µ–Ω)"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
        passenger.created_by = current_user.get("username")
        new_passenger = storage.create(passenger)
        return new_passenger
    except ValueError as e:
        # –ü–∞—Å—Ö–∞–ª–∫–∞ —Å –î–∂–µ–∫–æ–º –∏ –†–æ–∑–æ–π
        raise HTTPException(status_code=400, detail=str(e))


@app.get(
    "/passengers/{passenger_id}", 
    response_model=Passenger, 
    tags=["Passengers"],
    summary="–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –ø–æ ID",
    description="""
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–∞—Å—Å–∞–∂–∏—Ä–µ.
    
    **üîì –ù–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏**
    """,
    responses={
        200: {
            "description": "–ü–∞—Å—Å–∞–∂–∏—Ä –Ω–∞–π–¥–µ–Ω",
            "content": {
                "application/json": {
                    "example": {
                        "id": 1,
                        "name": "Braund, Mr. Owen Harris",
                        "pclass": 3,
                        "sex": "male",
                        "age": 22,
                        "fare": 7.25,
                        "embarked": "Southampton",
                        "destination": "New York",
                        "cabin": None,
                        "ticket": "A/5 21171",
                        "created_by": "system"
                    }
                }
            }
        },
        404: {
            "description": "–ü–∞—Å—Å–∞–∂–∏—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Passenger with id 999 not found"
                    }
                }
            }
        }
    }
)
async def get_passenger(passenger_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–∞—Å—Å–∞–∂–∏—Ä–µ –ø–æ ID"""
    passenger = storage.get_by_id(passenger_id)
    if passenger is None:
        raise HTTPException(
            status_code=404, 
            detail=f"Passenger with id {passenger_id} not found"
        )
    return passenger


@app.put(
    "/passengers/{passenger_id}", 
    response_model=Passenger, 
    tags=["Passengers"],
    summary="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ üîê",
    description="""
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–∞. **–¢—Ä–µ–±—É–µ—Ç—Å—è JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.**
    
    **üé≠ –ü–∞—Å—Ö–∞–ª–∫–∞:** –î–∂–µ–∫ –∏ –†–æ–∑–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –æ–¥–Ω–æ–π –∫–∞—é—Ç–µ!
    """,
    responses={
        200: {
            "description": "–ü–∞—Å—Å–∞–∂–∏—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
            "content": {
                "application/json": {
                    "example": {
                        "id": 1,
                        "name": "DeWitt Bukater, Miss. Rose",
                        "pclass": 1,
                        "sex": "female",
                        "age": 17,
                        "fare": 211.34,
                        "embarked": "Southampton",
                        "destination": "New York",
                        "cabin": "B52",
                        "ticket": "PC 17599",
                        "created_by": "admin"
                    }
                }
            }
        },
        400: {
            "description": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ –ø–∞—Å—Ö–∞–ª–∫–∞ —Å –∫–∞—é—Ç–æ–π",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Jack and Rose cannot share the same cabin! üíî"
                    }
                }
            }
        },
        401: {
            "description": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JWT —Ç–æ–∫–µ–Ω",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Not authenticated"
                    }
                }
            }
        },
        404: {
            "description": "–ü–∞—Å—Å–∞–∂–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Passenger with id 999 not found"
                    }
                }
            }
        }
    }
)
async def update_passenger(
    passenger_id: int,
    passenger: PassengerUpdate,
    current_user: Dict = Depends(get_current_user)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è JWT —Ç–æ–∫–µ–Ω)"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º created_by –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        existing = storage.get_by_id(passenger_id)
        if existing and existing.created_by:
            passenger.created_by = existing.created_by
        
        updated_passenger = storage.update(passenger_id, passenger)
        if updated_passenger is None:
            raise HTTPException(
                status_code=404, 
                detail=f"Passenger with id {passenger_id} not found"
            )
        return updated_passenger
    except ValueError as e:
        # –ü–∞—Å—Ö–∞–ª–∫–∞ —Å –î–∂–µ–∫–æ–º –∏ –†–æ–∑–æ–π
        raise HTTPException(status_code=400, detail=str(e))


@app.delete(
    "/passengers/{passenger_id}", 
    status_code=204, 
    tags=["Passengers"],
    summary="–£–¥–∞–ª–∏—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞ üîêüëë",
    description="""
    –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. **–¢—Ä–µ–±—É–µ—Ç—Å—è JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å —Ä–æ–ª—å—é admin.**
    
    –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤.
    """,
    responses={
        204: {
            "description": "–ü–∞—Å—Å–∞–∂–∏—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
        },
        401: {
            "description": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JWT —Ç–æ–∫–µ–Ω",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Not authenticated"
                    }
                }
            }
        },
        403: {
            "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å admin)",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Insufficient permissions. Admin role required."
                    }
                }
            }
        },
        404: {
            "description": "–ü–∞—Å—Å–∞–∂–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Passenger with id 999 not found"
                    }
                }
            }
        }
    }
)
async def delete_passenger(
    passenger_id: int,
    current_user: Dict = Depends(require_admin)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å admin)"""
    success = storage.delete(passenger_id)
    if not success:
        raise HTTPException(
            status_code=404, 
            detail=f"Passenger with id {passenger_id} not found"
        )
    return None
