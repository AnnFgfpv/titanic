import csv
from typing import List, Optional, Dict
from pathlib import Path
from .models import Passenger, PassengerCreate


class PassengerStorage:
    """In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"""
    
    def __init__(self):
        self.passengers: Dict[int, Passenger] = {}
        self.next_id: int = 1
    
    def load_from_csv(self, csv_path: str) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        path = Path(csv_path)
        if not path.exists():
            print(f"Warning: CSV file {csv_path} not found. Starting with empty storage.")
            return
        
        with open(csv_path, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                try:
                    # –ü–∞—Ä—Å–∏–º –≤–æ–∑—Ä–∞—Å—Ç - –æ–∫—Ä—É–≥–ª—è–µ–º –¥—Ä–æ–±–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    age_value = None
                    if row['Age'] and row['Age'].strip():
                        try:
                            age_value = int(float(row['Age']))  # float -> int –¥–ª—è –¥—Ä–æ–±–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                        except ValueError:
                            age_value = None
                    
                    passenger = Passenger(
                        id=int(row['PassengerId']),
                        name=row['Name'],
                        pclass=int(row['Pclass']),
                        sex=row['Sex'],
                        age=age_value,
                        fare=float(row['Fare']),
                        embarked=row['Embarked'],
                        destination=row['Destination'],
                        cabin=row['Cabin'] if row['Cabin'] and row['Cabin'].strip() else None,
                        ticket=row['Ticket']
                    )
                    self.passengers[passenger.id] = passenger
                    self.next_id = max(self.next_id, passenger.id + 1)
                except (ValueError, KeyError) as e:
                    print(f"Error loading row: {row}, error: {e}")
                    continue
    
    def get_all(
        self, 
        pclass: Optional[int] = None,
        sex: Optional[str] = None,
        embarked: Optional[str] = None,
        limit: int = 100,
        offset: int = 0
    ) -> List[Passenger]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        filtered = list(self.passengers.values())
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if pclass is not None:
            filtered = [p for p in filtered if p.pclass == pclass]
        if sex is not None:
            filtered = [p for p in filtered if p.sex == sex]
        if embarked is not None:
            filtered = [p for p in filtered if p.embarked == embarked]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        return filtered[offset:offset + limit]
    
    def search_by_name(self, name: str, limit: int = 100) -> List[Passenger]:
        """–ü–æ–∏—Å–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏ (case-insensitive)"""
        name_lower = name.lower()
        found = [
            p for p in self.passengers.values() 
            if name_lower in p.name.lower()
        ]
        return found[:limit]
    
    def get_by_id(self, passenger_id: int) -> Optional[Passenger]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –ø–æ ID"""
        return self.passengers.get(passenger_id)
    
    def _is_jack(self, name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Å—Å–∞–∂–∏—Ä –î–∂–µ–∫–æ–º"""
        name_lower = name.lower()
        return 'jack' in name_lower or 'dawson' in name_lower
    
    def _is_rose(self, name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Å—Å–∞–∂–∏—Ä –†–æ–∑–æ–π"""
        name_lower = name.lower()
        return 'rose' in name_lower or 'dewitt' in name_lower or 'bukater' in name_lower
    
    def validate_cabin_assignment(self, passenger_name: str, cabin: Optional[str], exclude_id: Optional[int] = None) -> None:
        """
        –ü–∞—Å—Ö–∞–ª–∫–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –î–∂–µ–∫ –∏ –†–æ–∑–∞ –Ω–µ –≤ –æ–¥–Ω–æ–π –∫–∞—é—Ç–µ!
        Raises ValueError –µ—Å–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ.
        """
        if not cabin:
            return  # –ï—Å–ª–∏ –∫–∞—é—Ç—ã –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
        
        is_jack = self._is_jack(passenger_name)
        is_rose = self._is_rose(passenger_name)
        
        if not (is_jack or is_rose):
            return  # –û–±—ã—á–Ω—ã–π –ø–∞—Å—Å–∞–∂–∏—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—é—Ç–µ
        for pid, passenger in self.passengers.items():
            if exclude_id and pid == exclude_id:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            
            if passenger.cabin == cabin:
                # –ù–∞—à–ª–∏ –∫–æ–≥–æ-—Ç–æ –≤ —ç—Ç–æ–π –∫–∞—é—Ç–µ
                if is_jack and self._is_rose(passenger.name):
                    raise ValueError(
                        "Different social classes cannot share cabins on Titanic. "
                        "Jack (3rd class) and Rose (1st class) must remain separate... for now. üé≠üö¢"
                    )
                if is_rose and self._is_jack(passenger.name):
                    raise ValueError(
                        "I'm sorry, Jack and Rose cannot share the same cabin. "
                        "They're from different worlds! üíîüö¢"
                    )
    
    def create(self, passenger_data: PassengerCreate) -> Passenger:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Å—Ö–∞–ª–∫—É —Å –∫–∞—é—Ç–æ–π
        self.validate_cabin_assignment(passenger_data.name, passenger_data.cabin)
        
        passenger = Passenger(
            id=self.next_id,
            **passenger_data.dict()
        )
        self.passengers[passenger.id] = passenger
        self.next_id += 1
        return passenger
    
    def update(self, passenger_id: int, passenger_data: PassengerCreate) -> Optional[Passenger]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞"""
        if passenger_id not in self.passengers:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Å—Ö–∞–ª–∫—É —Å –∫–∞—é—Ç–æ–π (–∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞)
        self.validate_cabin_assignment(passenger_data.name, passenger_data.cabin, exclude_id=passenger_id)
        
        passenger = Passenger(
            id=passenger_id,
            **passenger_data.dict()
        )
        self.passengers[passenger_id] = passenger
        return passenger
    
    def delete(self, passenger_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞"""
        if passenger_id in self.passengers:
            del self.passengers[passenger_id]
            return True
        return False
    
    def count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"""
        return len(self.passengers)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
storage = PassengerStorage()

