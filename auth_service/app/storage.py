from typing import Dict, Optional, Set
from datetime import datetime
from .models import User, UserInDB, UserRole, RegisterRequest
from .security import hash_password


class UserStorage:
    """In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.users: Dict[int, UserInDB] = {}
        self.users_by_username: Dict[str, UserInDB] = {}
        self.refresh_tokens: Set[str] = set()  # –ê–∫—Ç–∏–≤–Ω—ã–µ refresh —Ç–æ–∫–µ–Ω—ã
        self.next_id: int = 1
        print(f"‚úÖ Auth Service initialized. First registered user will become admin!")
    
    def get_user_by_username(self, username: str) -> Optional[UserInDB]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏"""
        return self.users_by_username.get(username.lower())
    
    def get_user_by_id(self, user_id: int) -> Optional[UserInDB]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        return self.users.get(user_id)
    
    def create_user(self, user_data: RegisterRequest) -> UserInDB:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        –ü–µ—Ä–≤—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å admin,
        –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ - —Ä–æ–ª—å user.
        
        Args:
            user_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            
        Returns:
            UserInDB: –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            
        Raises:
            ValueError: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        username_lower = user_data.username.lower()
        
        if username_lower in self.users_by_username:
            raise ValueError(f"User with username '{user_data.username}' already exists")
        
        # –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å = admin, –æ—Å—Ç–∞–ª—å–Ω—ã–µ = user
        is_first_user = len(self.users) == 0
        role = UserRole.ADMIN if is_first_user else UserRole.USER
        
        user = UserInDB(
            id=self.next_id,
            username=username_lower,
            email=user_data.email,
            password_hash=hash_password(user_data.password),
            role=role,
            is_active=True,
            created_at=datetime.utcnow()
        )
        
        self.users[user.id] = user
        self.users_by_username[username_lower] = user
        self.next_id += 1
        
        if is_first_user:
            print(f"üëë First user '{username_lower}' registered as ADMIN!")
        else:
            print(f"üë§ User '{username_lower}' registered as USER")
        
        return user
    
    def update_user(self, user_id: int, email: Optional[str] = None) -> Optional[UserInDB]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            email: –ù–æ–≤—ã–π email (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            UserInDB: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ None
        """
        user = self.users.get(user_id)
        if not user:
            return None
        
        if email is not None:
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–ø–∏—é
            updated_user = UserInDB(
                id=user.id,
                username=user.username,
                email=email,
                password_hash=user.password_hash,
                role=user.role,
                is_active=user.is_active,
                created_at=user.created_at
            )
            self.users[user_id] = updated_user
            self.users_by_username[user.username] = updated_user
            return updated_user
        
        return user
    
    def add_refresh_token(self, token: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ refresh —Ç–æ–∫–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö"""
        self.refresh_tokens.add(token)
    
    def remove_refresh_token(self, token: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ refresh —Ç–æ–∫–µ–Ω–∞ (logout)"""
        self.refresh_tokens.discard(token)
    
    def is_refresh_token_valid(self, token: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ refresh —Ç–æ–∫–µ–Ω"""
        return token in self.refresh_tokens
    
    def count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return len(self.users)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
storage = UserStorage()

