from fastapi import FastAPI, HTTPException, status, Depends
from fastapi.security import HTTPBearer
from datetime import timedelta
from .models import (
    RegisterRequest, LoginRequest, RefreshRequest, TokenResponse,
    User, UserUpdate, UserRole
)
from .storage import storage
from .security import (
    verify_password, create_access_token, create_refresh_token,
    decode_token, verify_token_type, ACCESS_TOKEN_EXPIRE_MINUTES
)
from .dependencies import get_current_active_user, require_admin

security = HTTPBearer()

tags_metadata = [
    {
        "name": "Authentication",
        "description": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –≤—Ö–æ–¥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏"
    },
    {
        "name": "Users",
        "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    },
]

app = FastAPI(
    title="Titanic Auth Service",
    description="""
    ## üîê –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ JWT —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã Titanic Microservices.
    
    ### –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    - üîë –í—Ö–æ–¥ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º JWT —Ç–æ–∫–µ–Ω–æ–≤
    - üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ refresh token
    - üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - üö™ –í—ã—Ö–æ–¥ —Å –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ç–æ–∫–µ–Ω–∞
    
    ### –¢–æ–∫–µ–Ω—ã:
    - **Access Token**: 15 –º–∏–Ω—É—Ç (–¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤)
    - **Refresh Token**: 7 –¥–Ω–µ–π (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access token)
    
    ### –†–æ–ª–∏:
    - **admin**: –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø (—É–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –∏ —Ç.–¥.)
    - **user**: –ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø (—Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π)
    
    ### üëë –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å = Admin
    
    **–ü–µ—Ä–≤—ã–π** –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å **admin**.
    –í—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —Ä–æ–ª—å **user**.
    """,
    version="2.0.0",
    openapi_tags=tags_metadata,
    contact={
        "name": "Titanic Microservices Team",
        "email": "support@titanic-api.example.com"
    },
    license_info={
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT"
    }
)


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    print(f"üîê Auth Service started")
    print(f"üìä Total users: {storage.count()}")


@app.get("/", tags=["Authentication"])
async def root():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ"""
    return {
        "service": "Titanic Auth Service",
        "version": "2.0.0",
        "status": "running",
        "users_count": storage.count()
    }


@app.post(
    "/register",
    response_model=TokenResponse,
    status_code=status.HTTP_201_CREATED,
    tags=["Authentication"],
    summary="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    description="""
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ.
    
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è access –∏ refresh —Ç–æ–∫–µ–Ω—ã.
    
    **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
    - Username: 3-50 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -
    - Password: –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤
    - Email: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    
    **–†–æ–ª—å:** –ü–µ—Ä–≤—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å "admin",
    –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ - —Ä–æ–ª—å "user"
    
    **–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:**
    ```json
    {
      "username": "newuser",
      "password": "password123",
      "email": "user@example.com"
    }
    ```
    """,
    responses={
        201: {
            "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
            "content": {
                "application/json": {
                    "example": {
                        "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJuZXd1c2VyIiwidXNlcl9pZCI6Miwicm9sZSI6InVzZXIiLCJleHAiOjE3Mzc0NTUwMDB9.example_access_token_signature",
                        "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJuZXd1c2VyIiwidXNlcl9pZCI6Miwicm9sZSI6InVzZXIiLCJ0eXBlIjoicmVmcmVzaCIsImV4cCI6MTczNzQ2NDAwMH0.example_refresh_token_signature",
                        "token_type": "bearer",
                        "expires_in": 900
                    }
                }
            }
        },
        400: {
            "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Username 'admin' already exists"
                    }
                }
            }
        }
    }
)
async def register(user_data: RegisterRequest):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–µ—Ä–≤—ã–π = admin, –æ—Å—Ç–∞–ª—å–Ω—ã–µ = user)
        user = storage.create_user(user_data)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã
        access_token = create_access_token(
            data={"sub": user.username, "user_id": user.id, "role": user.role.value},
            expires_delta=timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
        )
        refresh_token = create_refresh_token(
            data={"sub": user.username, "user_id": user.id, "role": user.role.value}
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh token
        storage.add_refresh_token(refresh_token)
        
        return TokenResponse(
            access_token=access_token,
            refresh_token=refresh_token,
            token_type="bearer",
            expires_in=ACCESS_TOKEN_EXPIRE_MINUTES * 60
        )
    
    except ValueError as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )


@app.post(
    "/login",
    response_model=TokenResponse,
    tags=["Authentication"],
    summary="–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
    description="""
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤.
    
    **–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:**
    ```json
    {
      "username": "admin",
      "password": "admin123"
    }
    ```
    """,
    responses={
        200: {
            "description": "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥",
            "content": {
                "application/json": {
                    "example": {
                        "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsInVzZXJfaWQiOjEsInJvbGUiOiJhZG1pbiIsImV4cCI6MTczNzQ1NTAwMH0.example_access_token_signature",
                        "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsInVzZXJfaWQiOjEsInJvbGUiOiJhZG1pbiIsInR5cGUiOiJyZWZyZXNoIiwiZXhwIjoxNzM3NDY0MDAwfQ.example_refresh_token_signature",
                        "token_type": "bearer",
                        "expires_in": 900
                    }
                }
            }
        },
        401: {
            "description": "–ù–µ–≤–µ—Ä–Ω—ã–π username –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
            "content": {
                "application/json": {
                    "example": {
                        "detail": "Incorrect username or password"
                    }
                }
            }
        }
    }
)
async def login(credentials: LoginRequest):
    """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = storage.get_user_by_username(credentials.username)
    if not user or not verify_password(credentials.password, user.password_hash):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    if not user.is_active:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="User is inactive"
        )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    access_token = create_access_token(
        data={"sub": user.username, "user_id": user.id, "role": user.role.value},
        expires_delta=timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    )
    refresh_token = create_refresh_token(
        data={"sub": user.username, "user_id": user.id, "role": user.role.value}
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh token
    storage.add_refresh_token(refresh_token)
    
    return TokenResponse(
        access_token=access_token,
        refresh_token=refresh_token,
        token_type="bearer",
        expires_in=ACCESS_TOKEN_EXPIRE_MINUTES * 60
    )


@app.post(
    "/refresh",
    response_model=TokenResponse,
    tags=["Authentication"],
    summary="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access token",
    description="""
    –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ access token —Å –ø–æ–º–æ—â—å—é refresh token.
    
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç endpoint –∫–æ–≥–¥–∞ access token –∏—Å—Ç–µ–∫ (15 –º–∏–Ω—É—Ç).
    Refresh token –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 7 –¥–Ω–µ–π.
    
    **–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:**
    ```json
    {
      "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    }
    ```
    """,
    responses={
        200: {"description": "–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"},
        401: {"description": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π refresh token"}
    }
)
async def refresh_token(request: RefreshRequest):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access token"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞
    if not verify_token_type(request.refresh_token, "refresh"):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid token type. Refresh token required",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω
    if not storage.is_refresh_token_valid(request.refresh_token):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Refresh token has been revoked or is invalid",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    token_data = decode_token(request.refresh_token)
    if not token_data or not token_data.username:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid refresh token",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = storage.get_user_by_username(token_data.username)
    if not user or not user.is_active:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="User not found or inactive",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π access token
    new_access_token = create_access_token(
        data={"sub": user.username, "user_id": user.id, "role": user.role.value},
        expires_delta=timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    )
    
    # Refresh token –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º (–Ω–µ —Ä–æ—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
    return TokenResponse(
        access_token=new_access_token,
        refresh_token=request.refresh_token,
        token_type="bearer",
        expires_in=ACCESS_TOKEN_EXPIRE_MINUTES * 60
    )


@app.get(
    "/me",
    response_model=User,
    tags=["Users"],
    summary="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    responses={
        200: {"description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"},
        401: {"description": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}
    }
)
async def get_me(current_user: User = Depends(get_current_active_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    return current_user


@app.put(
    "/me",
    response_model=User,
    tags=["Users"],
    summary="–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
    description="""
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    **–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:**
    ```json
    {
      "email": "newemail@example.com"
    }
    ```
    """,
    responses={
        200: {"description": "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω"},
        401: {"description": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}
    }
)
async def update_me(
    user_update: UserUpdate,
    current_user: User = Depends(get_current_active_user)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    updated_user = storage.update_user(current_user.id, email=user_update.email)
    
    if not updated_user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="User not found"
        )
    
    return User(
        id=updated_user.id,
        username=updated_user.username,
        email=updated_user.email,
        role=updated_user.role,
        is_active=updated_user.is_active,
        created_at=updated_user.created_at
    )


@app.post(
    "/logout",
    status_code=status.HTTP_204_NO_CONTENT,
    tags=["Authentication"],
    summary="–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
    description="""
    –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è refresh token.
    
    –ü–æ—Å–ª–µ logout —Ç–µ–∫—É—â–∏–π refresh token —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º.
    Access token –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ (15 –º–∏–Ω—É—Ç).
    
    **–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:**
    ```json
    {
      "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    }
    ```
    """,
    responses={
        204: {"description": "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥"},
        401: {"description": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}
    }
)
async def logout(
    request: RefreshRequest,
    current_user: User = Depends(get_current_active_user)
):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è refresh token)"""
    storage.remove_refresh_token(request.refresh_token)
    return None

