from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import Response, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer
import httpx
import os

security = HTTPBearer()

tags_metadata = [
    {
        "name": "Gateway",
        "description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Gateway –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"
    },
    {
        "name": "Authentication",
        "description": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –≤—Ö–æ–¥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏ (–ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç—Å—è –∫ Auth Service)"
    },
    {
        "name": "Passengers",
        "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º–∏ (–ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç—Å—è –∫ Passenger Service). **–î–ª—è POST/PUT/DELETE —Ç—Ä–µ–±—É–µ—Ç—Å—è JWT —Ç–æ–∫–µ–Ω**"
    },
    {
        "name": "Statistics",
        "description": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º (–ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç—Å—è –∫ Statistics Service)"
    },
]

app = FastAPI(
    title="üö¢ Titanic API Gateway",
    description="""
    ## –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¢–∏—Ç–∞–Ω–∏–∫
    
    API Gateway –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º —Å–∏—Å—Ç–µ–º—ã.
    
    ### üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:
    
    #### 1. Auth Service üîê
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:
    - **POST** `/api/auth/register` - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - **POST** `/api/auth/login` - –≤—Ö–æ–¥ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–æ–≤
    - **POST** `/api/auth/refresh` - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ access token
    - **GET** `/api/auth/me` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ üîê
    - **PUT** `/api/auth/me` - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è üîê
    - **POST** `/api/auth/logout` - –≤—ã—Ö–æ–¥ üîê
    
    #### 2. Passenger Service
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:
    - **GET** `/api/passengers` - —Å–ø–∏—Å–æ–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    - **GET** `/api/passengers/search` - –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ (üé¨ –Ω–∞–π–¥–∏—Ç–µ –î–∂–µ–∫–∞ –∏ –†–æ–∑—É!)
    - **GET** `/api/passengers/{id}` - –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞
    - **POST** `/api/passengers` - —Å–æ–∑–¥–∞—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞ üîê
    - **PUT** `/api/passengers/{id}` - –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞ üîê
    - **DELETE** `/api/passengers/{id}` - —É–¥–∞–ª–∏—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞ üîêüëë (—Ç–æ–ª—å–∫–æ admin)
    
    #### 3. Statistics Service
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:
    - **GET** `/api/stats` - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    - **GET** `/api/stats/by-class` - –ø–æ –∫–ª–∞—Å—Å–∞–º
    - **GET** `/api/stats/by-port` - –ø–æ –ø–æ—Ä—Ç–∞–º –ø–æ—Å–∞–¥–∫–∏
    - **GET** `/api/stats/destinations` - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    - **GET** `/api/stats/age-distribution` - –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    
    ### üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (JWT)
    
    –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç JWT —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    
    **–®–∞–≥ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –≤—Ö–æ–¥**
    ```bash
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    POST /api/auth/register
    {
      "username": "myuser",
      "password": "mypassword123",
      "email": "user@example.com"
    }
    
    # –ò–ª–∏ –≤—Ö–æ–¥
    POST /api/auth/login
    {
      "username": "admin",
      "password": "admin123"
    }
    ```
    
    **–®–∞–≥ 2: –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã**
    ```json
    {
      "access_token": "eyJhbGc...",
      "refresh_token": "eyJhbGc...",
      "token_type": "bearer",
      "expires_in": 900
    }
    ```
    
    **–®–∞–≥ 3: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ access token**
    ```
    Authorization: Bearer eyJhbGc...
    ```
    
    **Access token** (15 –º–∏–Ω—É—Ç) - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤  
    **Refresh token** (7 –¥–Ω–µ–π) - –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access token
    
    ### üë• –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
    ```
    admin / admin123 (—Ä–æ–ª—å: admin - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)
    testuser / user123 (—Ä–æ–ª—å: user - —Å–æ–∑–¥–∞–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
    ```
    
    ### üé¨ –ü–∞—Å—Ö–∞–ª–∫–∏
    - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –î–∂–µ–∫–∞ –î–æ—É—Å–æ–Ω–∞ –∏ –†–æ–∑—É –î–µ–í–∏—Ç—Ç –ë—É–∫–∞—Ç–µ—Ä!
    - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å–µ–ª–∏—Ç—å –∏—Ö –≤ –æ–¥–Ω—É –∫–∞—é—Ç—É... üòè
    """,
    version="3.0.0",
    openapi_tags=tags_metadata,
    contact={
        "name": "Titanic Microservices Team",
        "email": "support@titanic-api.example.com"
    },
    license_info={
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT"
    }
)

# CORS middleware –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# URLs –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
AUTH_SERVICE_URL = os.getenv("AUTH_SERVICE_URL", "http://auth-service:8003")
PASSENGER_SERVICE_URL = os.getenv("PASSENGER_SERVICE_URL", "http://passenger-service:8001")
STATS_SERVICE_URL = os.getenv("STATS_SERVICE_URL", "http://stats-service:8002")


@app.get("/", tags=["Gateway"])
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API Gateway"""
    return {
        "service": "Titanic API Gateway",
        "version": "3.0.0",
        "status": "running",
        "documentation": "/docs",
        "auth": "JWT Bearer Token",
        "services": {
            "auth_service": {
                "base_url": "/api/auth",
                "description": "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
            },
            "passenger_service": {
                "base_url": "/api/passengers",
                "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º–∏"
            },
            "statistics_service": {
                "base_url": "/api/stats",
                "description": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
            }
        },
        "easter_eggs": "üé¨ Try to find Jack and Rose!"
    }


@app.get("/health", tags=["Gateway"])
async def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Gateway –∏ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: healthy, unhealthy –∏–ª–∏ unavailable.
    """
    health_status = {
        "gateway": "healthy",
        "version": "3.0.0",
        "services": {}
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Auth Service
    try:
        async with httpx.AsyncClient(timeout=5.0) as client:
            response = await client.get(f"{AUTH_SERVICE_URL}/")
            health_status["services"]["auth_service"] = {
                "status": "healthy" if response.status_code == 200 else "unhealthy",
                "url": AUTH_SERVICE_URL
            }
    except Exception as e:
        health_status["services"]["auth_service"] = {
            "status": "unavailable",
            "error": str(e)
        }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Passenger Service
    try:
        async with httpx.AsyncClient(timeout=5.0) as client:
            response = await client.get(f"{PASSENGER_SERVICE_URL}/")
            health_status["services"]["passenger_service"] = {
                "status": "healthy" if response.status_code == 200 else "unhealthy",
                "url": PASSENGER_SERVICE_URL
            }
    except Exception as e:
        health_status["services"]["passenger_service"] = {
            "status": "unavailable",
            "error": str(e)
        }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Statistics Service
    try:
        async with httpx.AsyncClient(timeout=5.0) as client:
            response = await client.get(f"{STATS_SERVICE_URL}/")
            health_status["services"]["stats_service"] = {
                "status": "healthy" if response.status_code == 200 else "unhealthy",
                "url": STATS_SERVICE_URL
            }
    except Exception as e:
        health_status["services"]["stats_service"] = {
            "status": "unavailable",
            "error": str(e)
        }
    
    return health_status


async def proxy_request(
    request: Request,
    target_url: str,
    method: str = "GET"
) -> Response:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º
    """
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
            headers = dict(request.headers)
            # –£–¥–∞–ª—è–µ–º headers, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å
            headers.pop('host', None)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ü–µ–ª–µ–≤–æ–º—É —Å–µ—Ä–≤–∏—Å—É
            if method == "GET":
                response = await client.get(
                    target_url,
                    params=request.query_params,
                    headers=headers
                )
            elif method == "POST":
                body = await request.body()
                response = await client.post(
                    target_url,
                    content=body,
                    headers=headers
                )
            elif method == "PUT":
                body = await request.body()
                response = await client.put(
                    target_url,
                    content=body,
                    headers=headers
                )
            elif method == "DELETE":
                response = await client.delete(
                    target_url,
                    headers=headers
                )
            else:
                raise HTTPException(status_code=405, detail="Method not allowed")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
            return Response(
                content=response.content,
                status_code=response.status_code,
                headers=dict(response.headers)
            )
    
    except httpx.HTTPStatusError as e:
        return JSONResponse(
            status_code=e.response.status_code,
            content={"detail": f"Service error: {e.response.text}"}
        )
    except httpx.RequestError as e:
        raise HTTPException(
            status_code=503,
            detail=f"Service unavailable: {str(e)}"
        )


# === –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Auth Service ===

@app.post(
    "/api/auth/register",
    tags=["Authentication"],
    summary="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    description="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–æ–≤"
)
async def register(request: Request):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Auth Service)"""
    target_url = f"{AUTH_SERVICE_URL}/register"
    return await proxy_request(request, target_url, "POST")


@app.post(
    "/api/auth/login",
    tags=["Authentication"],
    summary="–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
    description="""
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–æ–≤.

    """
)
async def login(request: Request):
    """–í—Ö–æ–¥ (–ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Auth Service)"""
    target_url = f"{AUTH_SERVICE_URL}/login"
    return await proxy_request(request, target_url, "POST")


@app.post(
    "/api/auth/refresh",
    tags=["Authentication"],
    summary="–û–±–Ω–æ–≤–∏—Ç—å access token",
    description="–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ access token —Å –ø–æ–º–æ—â—å—é refresh token"
)
async def refresh(request: Request):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Auth Service)"""
    target_url = f"{AUTH_SERVICE_URL}/refresh"
    return await proxy_request(request, target_url, "POST")


@app.get(
    "/api/auth/me",
    tags=["Authentication"],
    summary="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ üîê",
    description="–¢—Ä–µ–±—É–µ—Ç—Å—è JWT —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization"
)
async def get_me(request: Request):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Auth Service)"""
    target_url = f"{AUTH_SERVICE_URL}/me"
    return await proxy_request(request, target_url, "GET")


@app.put(
    "/api/auth/me",
    tags=["Authentication"],
    summary="–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üîê",
    description="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢—Ä–µ–±—É–µ—Ç—Å—è JWT —Ç–æ–∫–µ–Ω."
)
async def update_me(request: Request):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (–ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Auth Service)"""
    target_url = f"{AUTH_SERVICE_URL}/me"
    return await proxy_request(request, target_url, "PUT")


@app.post(
    "/api/auth/logout",
    tags=["Authentication"],
    summary="–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã üîê",
    description="–ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è refresh token. –¢—Ä–µ–±—É–µ—Ç—Å—è JWT —Ç–æ–∫–µ–Ω."
)
async def logout(request: Request):
    """–í—ã—Ö–æ–¥ (–ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Auth Service)"""
    target_url = f"{AUTH_SERVICE_URL}/logout"
    return await proxy_request(request, target_url, "POST")


# === –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Passenger Service ===

@app.get(
    "/api/passengers", 
    tags=["Passengers"],
    summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–ª–∞—Å—Å—É, –ø–æ–ª—É, –ø–æ—Ä—Ç—É –ø–æ—Å–∞–¥–∫–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."
)
async def get_passengers(request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ (–ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Passenger Service)"""
    target_url = f"{PASSENGER_SERVICE_URL}/passengers"
    return await proxy_request(request, target_url, "GET")


@app.get(
    "/api/passengers/search",
    tags=["Passengers"],
    summary="–ü–æ–∏—Å–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏",
    description="""
    –ü–æ–∏—Å–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π).
    
    **üé¨ –ü–∞—Å—Ö–∞–ª–∫–∞:** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ `?name=Jack` –∏–ª–∏ `?name=Rose`!
    """
)
async def search_passengers(request: Request):
    """–ü–æ–∏—Å–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏ (–ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Passenger Service)"""
    target_url = f"{PASSENGER_SERVICE_URL}/passengers/search"
    return await proxy_request(request, target_url, "GET")


@app.post(
    "/api/passengers", 
    tags=["Passengers"],
    summary="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ üîê",
    description="""
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞. **–¢—Ä–µ–±—É–µ—Ç—Å—è JWT —Ç–æ–∫–µ–Ω!**
    
    **üé≠ –ü–∞—Å—Ö–∞–ª–∫–∞:** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å–µ–ª–∏—Ç—å –î–∂–µ–∫–∞ –∏ –†–æ–∑—É –≤ –æ–¥–Ω—É –∫–∞—é—Ç—É!
    """
)
async def create_passenger(request: Request):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ (–ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Passenger Service)"""
    target_url = f"{PASSENGER_SERVICE_URL}/passengers"
    return await proxy_request(request, target_url, "POST")


@app.get(
    "/api/passengers/{passenger_id}", 
    tags=["Passengers"],
    summary="–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –ø–æ ID",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–∞—Å—Å–∞–∂–∏—Ä–µ."
)
async def get_passenger(passenger_id: int, request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Å—Å–∞–∂–∏—Ä–µ (–ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Passenger Service)"""
    target_url = f"{PASSENGER_SERVICE_URL}/passengers/{passenger_id}"
    return await proxy_request(request, target_url, "GET")


@app.put(
    "/api/passengers/{passenger_id}", 
    tags=["Passengers"],
    summary="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ üîê",
    description="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–∞. **–¢—Ä–µ–±—É–µ—Ç—Å—è JWT —Ç–æ–∫–µ–Ω!**"
)
async def update_passenger(passenger_id: int, request: Request):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–∞ (–ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Passenger Service)"""
    target_url = f"{PASSENGER_SERVICE_URL}/passengers/{passenger_id}"
    return await proxy_request(request, target_url, "PUT")


@app.delete(
    "/api/passengers/{passenger_id}", 
    tags=["Passengers"],
    summary="–£–¥–∞–ª–∏—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞ üîêüëë",
    description="–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞. **–¢—Ä–µ–±—É–µ—Ç—Å—è JWT —Ç–æ–∫–µ–Ω —Å —Ä–æ–ª—å—é admin!**"
)
async def delete_passenger(passenger_id: int, request: Request):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ (–ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Passenger Service)"""
    target_url = f"{PASSENGER_SERVICE_URL}/passengers/{passenger_id}"
    return await proxy_request(request, target_url, "DELETE")


# === –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Statistics Service ===

@app.get(
    "/api/stats", 
    tags=["Statistics"],
    summary="–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    description="–û–±—â–∞—è –ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç, —Å—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ –∏ —Ç.–¥."
)
async def get_statistics(request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Statistics Service)"""
    target_url = f"{STATS_SERVICE_URL}/stats"
    return await proxy_request(request, target_url, "GET")


@app.get(
    "/api/stats/by-class",
    tags=["Statistics"],
    summary="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º",
    description="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –∏ —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º –±–∏–ª–µ—Ç–æ–≤."
)
async def get_stats_by_class(request: Request):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º (–ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Statistics Service)"""
    target_url = f"{STATS_SERVICE_URL}/stats/by-class"
    return await proxy_request(request, target_url, "GET")


@app.get(
    "/api/stats/by-port",
    tags=["Statistics"],
    summary="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Ä—Ç–∞–º –ø–æ—Å–∞–¥–∫–∏",
    description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –∏ —Å—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä—Ç–∞ (Southampton, Cherbourg, Queenstown)."
)
async def get_stats_by_port(request: Request):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Ä—Ç–∞–º (–ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Statistics Service)"""
    target_url = f"{STATS_SERVICE_URL}/stats/by-port"
    return await proxy_request(request, target_url, "GET")


@app.get(
    "/api/stats/destinations",
    tags=["Statistics"],
    summary="–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
    description="""
    –¢–æ–ø –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –∫—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –ø–∞—Å—Å–∞–∂–∏—Ä—ã.
    
    **üé¨ –ü–∞—Å—Ö–∞–ª–∫–∞:** –ù–∞–π–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –î–∂–µ–∫–∞!
    """
)
async def get_destinations(request: Request):
    """–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Statistics Service)"""
    target_url = f"{STATS_SERVICE_URL}/stats/destinations"
    return await proxy_request(request, target_url, "GET")


@app.get(
    "/api/stats/age-distribution",
    tags=["Statistics"],
    summary="–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
    description="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º."
)
async def get_age_distribution(request: Request):
    """–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Statistics Service)"""
    target_url = f"{STATS_SERVICE_URL}/stats/age-distribution"
    return await proxy_request(request, target_url, "GET")
